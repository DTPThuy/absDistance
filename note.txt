cap = cv.VideoCapture(0)

    # Get the image size
    img_height = int(cap.get(cv.CAP_PROP_FRAME_HEIGHT))
    img_width = int(cap.get(cv.CAP_PROP_FRAME_WIDTH))

    # Define the intrinsic matrix of the camera
    intrinsic_matrix = np.array([
        [img_width, 0, img_width / 2],
        [0, img_height, img_height / 2],
        [0, 0, 1]
    ])

    while True:
        # Capture a frame from the camera
        ret, frame = cap.read()

        # Check if the frame was successfully captured
        if not ret:
            break

        # Define the size of the object in real-world units
        object_width = 0.1  # meters
        object_height = 0.2  # meters

        # Compute the size of the object in pixels
        object_width_pixels = object_width * img_width / intrinsic_matrix[0][0]
        object_height_pixels = object_height * img_height / intrinsic_matrix[1][1]

        # Define the coordinates of the object in the image
        object_x, object_y = 100, 200

        # Compute the relative depth of the object
        relative_depth = object_width_pixels / object_width

        # Compute the absolute depth of the object
        absolute_depth = relative_depth * \
            intrinsic_matrix[0][0] / (object_x - intrinsic_matrix[0][2])

        # Compute the 3D coordinates of the object
        x = (object_x - intrinsic_matrix[0][2]) * \
            absolute_depth / intrinsic_matrix[0][0]
        y = (object_y - intrinsic_matrix[1][2]) * \
            absolute_depth / intrinsic_matrix[1][1]
        z = absolute_depth

        # The 3D coordinates of the object in the camera coordinate system
        object_coordinates = np.array([x, y, z])

        # Display the frame
        cv.imshow("Frame", frame)

        # Check if the user pressed the 'q' key to exit the loop
        if cv.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the camera and close the window
    cap.release()
    cv.destroyAllWindows()
  


